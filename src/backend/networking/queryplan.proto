package peloton.networking;

import "expression.proto";

message AbstractPlan {
    // A plan node can have multiple children
    repeated AbstractPlan children = 1;
    // Associated with children
    optional bool include_children = 2;
    // The parent node
    optional AbstractPlan parent = 3;
}

message AbstractScanPlan {
    // Columns from tile group to be added to logical tile output
    repeated int64 column_ids = 1;
    // Associated with column id
    optional bool include_column_ids = 2;
    // Selection predicate pointer
    optional ExpressionMessage predicate = 3;
    // Pointer to table to scan from
    optional DataTable target_table = 4;
}

message SeqScanPlan {
    // The base abstract scan plan
    required AbstractScanPlan base = 1;
}

message IndexScanPlan {
    // The base abstract scan plan
    required AbstractScanPlan base = 1;
}

message QueryPlanRequest {
    required string plan_type = 1;
    optional SeqScanPlan seq_scan_plan = 2;
    optional IndexScanPlan index_scan_plan = 3;
}